Task - excel upload and read ,print

To upload an Excel file, process its rows one by one using an interface, and print the processed rows simultaneously, you can create a Java web application using a framework like Spring Boot and integrate an Excel file upload functionality. Here's a high-level example of such a scenario:

1. Set up a Spring Boot application. You can create a new Spring Boot project using your preferred IDE or use Spring Initializr.

2. Add the necessary dependencies to your `pom.xml` for handling file uploads and Apache POI for Excel processing:

```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>4.1.2</version> <!-- Use the latest version -->
</dependency>
```

3. Create an interface for Excel data processing:

```java
import org.apache.poi.ss.usermodel.Row;

public interface ExcelDataProcessor<T> {
    T processRow(Row row);
}
```

4. Implement the interface with your custom logic:

```java
public class MyExcelProcessor implements ExcelDataProcessor<String> {
    @Override
    public String processRow(Row row) {
        // Implement your custom logic to process the row and return a String
        String cellValue = row.getCell(0).getStringCellValue();
        return "Processed: " + cellValue;
    }
}
```

5. Create a controller for handling file uploads and processing:

```java
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Controller
public class ExcelController {

    @Autowired
    private ExcelDataProcessor<String> excelProcessor; // Inject your ExcelDataProcessor implementation

    @GetMapping("/")
    public String uploadForm() {
        return "upload";
    }

    @PostMapping("/upload")
    public String uploadFile(@RequestParam("file") MultipartFile file) throws IOException {
        List<String> processedRows = new ArrayList<>();

        if (!file.isEmpty()) {
            try {
                Workbook workbook = WorkbookFactory.create(file.getInputStream());
                Sheet sheet = workbook.getSheetAt(0);

                for (Row row : sheet) {
                    String processedRow = excelProcessor.processRow(row);
                    processedRows.add(processedRow);
                    System.out.println(processedRow); // Print the processed row to console
                }

                workbook.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        // You can pass the processedRows to your view for display or further processing

        return "redirect:/";
    }
}
```

6. Create a simple HTML form (`upload.html`) for uploading Excel files:

```html
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Excel File Upload</title>
</head>
<body>
<h1>Upload Excel File</h1>
<form action="/upload" method="post" enctype="multipart/form-data">
    <input type="file" name="file" accept=".xlsx, .xls">
    <button type="submit">Upload</button>
</form>
</body>
</html>
```

7. Configure your application to handle file uploads in the `application.properties` file:

```properties
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
```

8. Start your Spring Boot application, and you can access the file upload form at `http://localhost:8080/`. After uploading an Excel file, it will process the rows and print them to the console simultaneously.

This example provides a basic framework for uploading Excel files, processing rows using an interface, and printing the processed rows. You can customize it further based on your specific requirements.